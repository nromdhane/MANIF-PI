"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var captcha_endpoint_pipe_1 = require("./captcha-endpoint.pipe");
var config_1 = require("./config");
var CaptchaService = /** @class */ (function () {
    function CaptchaService(http, captchaEndpointPipe, config) {
        this.http = http;
        this.captchaEndpointPipe = captchaEndpointPipe;
        this.config = config;
    }
    Object.defineProperty(CaptchaService.prototype, "styleName", {
        get: function () {
            return this._styleName;
        },
        set: function (styleName) {
            this._styleName = styleName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CaptchaService.prototype, "captchaEndpoint", {
        // The captcha endpoint for BotDetect requests.
        get: function () {
            return this.captchaEndpointPipe.transform(this.config.captchaEndpoint);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CaptchaService.prototype, "botdetectInstance", {
        // Get BotDetect instance, which is provided by BotDetect script.
        get: function () {
            if (!this.styleName) {
                return null;
            }
            return BotDetect.getInstanceByStyleName(this.styleName);
        },
        enumerable: true,
        configurable: true
    });
    // Get captcha html markup from BotDetect API.
    CaptchaService.prototype.getHtml = function () {
        var url = this.captchaEndpoint + '?get=html&c=' + this.styleName;
        return this.http.get(url, { responseType: 'text' });
    };
    // UI validate captcha.
    CaptchaService.prototype.validateUnsafe = function (captchaCode) {
        if (!this.botdetectInstance) {
            throw new Error('BotDetect instance does not exist.');
        }
        var url = this.botdetectInstance.validationUrl + '&i=' + captchaCode;
        return this.http.get(url);
    };
    CaptchaService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    CaptchaService.ctorParameters = function () { return [
        { type: http_1.HttpClient, },
        { type: captcha_endpoint_pipe_1.CaptchaEndpointPipe, },
        { type: undefined, decorators: [{ type: core_1.Inject, args: [config_1.CAPTCHA_SETTINGS,] },] },
    ]; };
    return CaptchaService;
}());
exports.CaptchaService = CaptchaService;
//# sourceMappingURL=captcha.service.js.map